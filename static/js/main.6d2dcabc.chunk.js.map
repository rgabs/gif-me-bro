{"version":3,"sources":["utils/cache.js","utils/hooks.js","components/Gif.js","utils/grid.js","components/Grid.js","App.js","index.js"],"names":["localCache","updateCache","input","newGifs","allGifs","Object","objectSpread","reduce","acc","curr","id","defineProperty","searchStringsMap","toLowerCase","map","repo","storeCacheToLocalStorage","sessionStorage","setItem","JSON","stringify","processGifs","gifs","data","_ref","images","title","gifUrl","downsized_medium","url","stillUrl","aspectRatio","width","height","Number","total","pagination","total_count","fetchGifs","searchText","offset","limit","arguments","length","undefined","fetch","concat","then","res","json","useGifs","_useState5","useState","_useState6","slicedToArray","setGifs","_useState7","_useState8","loadState","setLoadState","_useState9","_useState10","totalResults","setTotalResults","isBottom","_useState3","_useState4","setIsBottom","useEffect","window","onscroll","d","document","documentElement","scrolled","scrollTop","innerHeight","offsetHeight","useScroll","delay","_useState","_useState2","debouncedVal","setDebouncedVal","handler","setTimeout","clearTimeout","useDebounce","updatedGifs","toConsumableArray","finally","key","hasOwnProperty","repoID","_ref2","Gif","currentUrl","setCurrenturl","style","react_default","a","createElement","className","onClick","lib_default","image","src","zoomImage","shouldReplaceImage","alt","defaultStyles","createGrid","columnSize","newGrid","i","push","maxHeight","columnData","forEach","element","indexToPush","existingHeights","g","indexOf","Math","min","apply","getLowestHeightColumnIndex","Grid","itemsPerRow","setItemsPerRow","containerWidth","setContainerWidth","_useGifs","gifContainerRef","useRef","processedGifs","current","handleResize","offsetWidth","addEventListener","removeEventListener","onChange","e","target","value","noOfItems","ref","padding","cellSpacing","imageProps","objectWithoutProperties","components_Gif","assign","align","App","setSearchText","storedCache","parse","getItem","setCacheFromLocalStorage","components_Grid","ReactDOM","render","src_App","getElementById"],"mappings":"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","file":"static/js/main.6d2dcabc.chunk.js","sourcesContent":["let localCache = {};\n\nexport const isCachePresent = (key) => localCache.searchStringsMap && localCache.searchStringsMap.hasOwnProperty(key);\n\nexport const updateCache = (input, newGifs) => {\n    /*\n        # Cache Structure\n        {\n            allGifs: {\n                3ofT5GIjZ04Y4OoDDi: {\n                    id: \"3ofT5GIjZ04Y4OoDDi\",\n                    title: \"...\",\n                    url: \"https://media0.giphy.com/media/3ofT5GIjZ04Y4OoDDi/giphy.gif\"\n                }\n            },\n            searchStringsMap: {\n                rahul: [\"Bp3hlZ1B4Rny8NKhqZ\", \"3ofT5GIjZ04Y4OoDDi\"]\n            }\n        }\n     */\n    localCache.allGifs = { // contains all gifs data in format:: {[gifID]: {<gif url>}}\n        ...localCache.allGifs,\n        ...newGifs.reduce((acc, curr) => acc[curr.id] ? acc : { ...acc, [curr.id]: curr }, {})\n    };\n    localCache.searchStringsMap = { // contains which search string corresponds to which gif ids\n        ...localCache.searchStringsMap,\n        [input.toLowerCase()]: newGifs.map((repo) => repo.id)\n    };\n}\n\nexport const getCachedGifsForInput = (input) => {\n    return localCache\n            .searchStringsMap[input.toLowerCase()]\n            .map((repoID) => localCache.allGifs[repoID]);\n};\n\nexport const storeCacheToLocalStorage = () => {\n    sessionStorage.setItem('cache', JSON.stringify(localCache));\n}\n\nexport const setCacheFromLocalStorage = () => {\n    try {\n        const storedCache = JSON.parse(sessionStorage.getItem('cache'));\n        if (typeof storedCache === 'object' && storedCache !== null) {\n            localCache = storedCache;\n        }\n    }\n    catch(e) {\n        // Cache doesn't exist;\n    }    \n}\n\nexport const processGifs = (gifs) => {\n    const newGifs = gifs.data.map(({ id, images, title}) => ({\n        id,\n        title,\n        gifUrl: images.downsized_medium.url,\n        stillUrl: images['480w_still'].url,\n        aspectRatio: images.downsized_medium.width / images.downsized_medium.height,\n        height: Number(images.downsized_medium.height)\n    }));\n\n    return {newGifs, total: gifs.pagination.total_count}\n}","import { useState, useEffect } from 'react';\nimport {isCachePresent, getCachedGifsForInput, processGifs, updateCache} from './cache';\n\nconst fetchGifs = (searchText, offset, limit = 15) => {\n    const API_KEY = 'kVHHyZckoyzVBz92p2sdzGIOE50ewYm4';\n    return fetch(`https://api.giphy.com/v1/gifs/search?api_key=${API_KEY}&q=${searchText}&limit=${limit}&offset=${offset}`)\n        .then(res => res.json())\n        .then(processGifs)\n}\n\nconst useDebounce = (input, delay) => {\n    const [debouncedVal, setDebouncedVal] = useState(input);\n    useEffect(() => {\n        const handler = setTimeout(() => {\n            setDebouncedVal(input);\n        }, delay);\n        return () => {\n            clearTimeout(handler);\n        }\n    }, [input]);\n    return debouncedVal;\n}\n\nconst useScroll = (offset = 500) => {\n    const [isBottom, setIsBottom] = useState(false);\n    \n    useEffect(() => {\n        window.onscroll = function () {\n            var d = document.documentElement;\n            var scrolled = d.scrollTop + window.innerHeight;\n            var height = d.offsetHeight;    \n            setIsBottom(height - scrolled < offset);\n        };\n\n        return () => window.onscroll = null;\n    }, []);\n\n    return isBottom;\n};\n\nconst useGifs = (input) => {\n    const [gifs, setGifs] = useState([]);\n    const [loadState, setLoadState] = useState(false);\n    const [totalResults, setTotalResults] = useState();\n\n    const isBottom = useScroll(500);\n    const searchText = useDebounce(input, 500);\n\n    useEffect(() => {\n        if(!isBottom) return;\n        if (totalResults === gifs.length) return;\n        setLoadState(true);\n        fetchGifs(searchText, gifs.length)\n            .then(({ newGifs }) => {\n                const updatedGifs = [...gifs, ...newGifs];\n                setGifs(updatedGifs);\n                return updatedGifs;\n            })\n            .then(gifs => updateCache(searchText, gifs))\n            .finally(() => setLoadState(false));\n    }, [isBottom]);\n\n    useEffect(() => {\n        if (!searchText) return setGifs([]);\n        if (isCachePresent(searchText)) {\n            return setGifs(getCachedGifsForInput(searchText));\n        }\n        setLoadState(true);\n        setGifs([]);\n        fetchGifs(searchText, gifs.length)\n            .then(({ newGifs, total }) => {\n                setGifs(newGifs);\n                setTotalResults(total);\n                return newGifs;\n            })\n            .then(gifs => updateCache(searchText, gifs))\n            .finally(() => setLoadState(false));\n    }, [searchText]);\n\n    return { gifs, loadState };\n}\n\nexport default useGifs","import React, { useState} from 'react';\nimport ImageZoom from 'react-medium-image-zoom'\n\nconst Gif = ({ gifUrl, stillUrl, title, aspectRatio, width }) => {\n    const [currentUrl, setCurrenturl] = useState(stillUrl);\n\n    const style = {\n        width: width,\n        height: width / aspectRatio\n    };\n\n    const onImagePress = () => setCurrenturl(currentUrl === gifUrl ? stillUrl : gifUrl);\n\n    return (\n        <div style={style} className={`image-container`}>\n            <div className=\"video-controls\">\n                <span onClick={onImagePress} className={`control-icon ${currentUrl === gifUrl ? \"pause\" : \"play\"}`}></span>\n            </div>\n            <ImageZoom image={{ src: currentUrl }} zoomImage={{ src: gifUrl }}\n                shouldReplaceImage={false} alt={title} defaultStyles={{ image: { width: '100%' } }}/>\n            <br />\n        </div>\n    )\n}\n\nexport default Gif;","const getLowestHeightColumnIndex = (newGrid) => {\n    const existingHeights = newGrid.map(g => g.maxHeight);\n    return existingHeights.indexOf(Math.min(...existingHeights));\n};\n\nconst createGrid = (input, columnSize, offset = 0) => {\n    let newGrid = [];\n\n    for (let i = 0; i < columnSize; i++) {\n        newGrid.push({ maxHeight: 0, columnData: [] });\n    }\n\n    input.forEach(element => {\n        const indexToPush = getLowestHeightColumnIndex(newGrid);\n        newGrid[indexToPush].columnData.push(element);\n        newGrid[indexToPush].maxHeight += element.height + offset; \n    });\n\n    return newGrid.map(g => g.columnData);\n};\n\n\n\nexport default createGrid;","import React, { useState, useEffect, useRef } from 'react';\nimport useGifs from '../utils/hooks';\nimport Gif from './Gif';\nimport createGrid from '../utils/grid';\n\nconst Grid = ({ searchText }) => {\n    const [itemsPerRow, setItemsPerRow] = useState(2);\n    const [containerWidth, setContainerWidth] = useState(0);\n    const { gifs, loadState } = useGifs(searchText);\n    const gifContainerRef = useRef(null);\n\n    const gridOptions = [2, 3, 4, 5];\n    const cellSpacing = 10;\n    const processedGifs = createGrid(gifs, itemsPerRow, cellSpacing);\n\n    useEffect(() => {\n        if (!gifContainerRef.current) return;\n        const handleResize = () => {\n            setContainerWidth(gifContainerRef.current.offsetWidth);\n        }\n        handleResize();\n        window.addEventListener('resize', handleResize);\n        return () => window.removeEventListener('resize', handleResize);\n    }, [gifs]);\n\n    if (gifs.length === 0 && !loadState) {\n        return <p>NO GIFS</p>;\n    }\n\n    return <div className=\"grid-wrapper\">\n        <div className=\"column-size-container\">\n            <span>Items per row:</span>\n            <select onChange={e => setItemsPerRow(e.target.value)} value={itemsPerRow} className=\"column-size-select\">\n                {gridOptions.map(noOfItems => <option key={noOfItems} value={noOfItems}>{noOfItems}</option>)}\n            </select>\n        </div>\n        \n        <div ref={gifContainerRef} className=\"grid\">\n            {\n                processedGifs.map((columnData, i) => {\n                    return (\n                        <div key={i} style={{ padding: cellSpacing + 'px'}}>\n                            {columnData.map(({ id, ...imageProps },) => (\n                                <Gif key={id} {...imageProps} width={(containerWidth / itemsPerRow) - 2 * cellSpacing} />\n                            ))}\n                        </div>\n                    )\n                })\n            }\n        </div>\n        {loadState ? <p align=\"center\">Loading...</p> : null}\n    </div>;\n}\n\nexport default Grid;","import React, { useState, useEffect} from 'react';\nimport { storeCacheToLocalStorage, setCacheFromLocalStorage} from './utils/cache';\nimport Grid from './components/Grid';\n\nconst App = () => {\n  const [searchText, setSearchText] = useState('');\n  \n  useEffect(() => {\n    setCacheFromLocalStorage();\n    window.addEventListener(\"beforeunload\", storeCacheToLocalStorage);\n    return () => window.removeEventListener(\"beforeunload\", storeCacheToLocalStorage);\n  },[]);\n\n  return (\n    <div className=\"App\">\n      <h3 align=\"center\">Hello! I am GIF-me-bro. I will gif you for all kind of inputs. <br />Happy Gifing ;)</h3>\n      <input className=\"search-input\" value={searchText} onChange={(e) => setSearchText(e.target.value)}></input>\n      <Grid searchText={searchText}/>\n    </div>\n  );\n}\n\nexport default (App);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}